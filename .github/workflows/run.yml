name: Pull Files from ACL4SSR
on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 16 */3 * *'  # 每3天的中国时间晚上12点执行任务
  workflow_dispatch:
permissions:
  contents: write
jobs:
  pull-files:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2

      - name: Download Files
        run: |
          mkdir -p rule/direct rule/proxy rule/reject rule/fakeip

          # fake yaml
          curl -o rule/fakeip/fakeip-filter.mrs https://github.com/DustinWin/ruleset_geodata/raw/clash-ruleset/fakeip-filter.mrs
          # direct yaml
          curl -o rule/direct/ChinaDomain.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list  
          curl -o rule/direct/ChinaDomain.yaml https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaDomain.yaml    
          curl -o rule/direct/ChinaIp.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaIp.list
          curl -o rule/direct/ChinaIp.yaml https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaIp.yaml
          curl -o rule/direct/ChinaIpV6.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaIpV6.list
          curl -o rule/direct/ChinaIpV6.yaml https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaIpV6.yaml
          curl -o rule/direct/PrivateTracker.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PrivateTracker/PrivateTracker.list
          curl -o rule/direct/PrivateTracker.yaml https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PrivateTracker/PrivateTracker.yaml
          # proxy  yaml
          curl -o rule/proxy/ProxyMedia.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list
          curl -o rule/proxy/ProxyMedia.yaml https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ProxyMedia.yaml
          curl -o rule/proxy/Telegram.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Telegram.list
          curl -o rule/proxy/Telegram.yaml https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Telegram.yaml
          curl -o rule/proxy/Google.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.list
          curl -o rule/proxy/Google.yaml https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml
          curl -o rule/proxy/Blizzard.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Blizzard/Blizzard.list
          curl -o rule/proxy/Blizzard.yaml https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Blizzard/Blizzard_No_Resolve.yaml
          # reject yaml
          curl -o rule/reject/BanAD.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list
          curl -o rule/reject/BanAD.yaml https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanAD.yaml
          curl -o rule/reject/BanEasyListChina.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyListChina.list
          curl -o rule/reject/BanEasyListChina.yaml https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanEasyListChina.yaml
          curl -o rule/reject/BanProgramAD.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list
          curl -o rule/reject/BanProgramAD.yaml https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanProgramAD.yaml

      - name: Merge Proxy YAML Files
        run: |
          head -n 1 rule/proxy/ProxyMedia.yaml > rule/proxy/TelegramMedia.yaml
          tail -n +2 rule/proxy/ProxyMedia.yaml | grep -v '^payload:' >> rule/proxy/TelegramMedia.yaml
          tail -n +2 rule/proxy/Telegram.yaml >> rule/proxy/TelegramMedia.yaml
      - name: Merge Proxy List Files
        run: |
          cat rule/proxy/ProxyMedia.list > rule/proxy/TelegramMedia.list
          echo "" >> rule/proxy/TelegramMedia.list  # 添加一个空行
          cat rule/proxy/Telegram.list >> rule/proxy/TelegramMedia.list



      - name: Configure Git
        run: |
          git config user.email "133769218+xyself@users.noreply.github.com"
          git config user.name "xyself"

      - name: Commit files
        run: |
          git add rule/direct rule/proxy rule/reject rule/fakeip
          git diff --quiet && git diff --staged --quiet || git commit -m "Auto-pull updated files"

      - name: Check for existing release
        id: check_release
        run: |
          release_exists=$(curl -sSL https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.0.0 | grep '"message": "Not Found"')
          if [ -z "$release_exists" ]; then
            echo "Release exists"
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "Release does not exist"
            echo "release_exists=false" >> $GITHUB_ENV
          fi

      - name: Get Release ID
        id: get_release_id
        run: |
          response=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.0.0")
          release_id=$(echo "$response" | jq -r '.id')
          echo "release_id=$release_id" >> $GITHUB_ENV
          echo "release_exists=$(echo "$response" | jq -r '.id // empty')" >> $GITHUB_ENV

      - name: Delete Old Release
        if: env.release_exists
        run: |
          if [ -n "${{ env.release_id }}" ]; then
            echo "Deleting old release..."
            curl -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}"
          else
            echo "No old release found."
          fi

      - name: Create Release
        if: env.release_exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.0
          release_name: "FakeIP Filter Release"
          body: "发布 fakeip-filter.mrs 文件"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: env.release_exists == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./rule/fakeip/fakeip-filter.mrs
          asset_name: fakeip-filter.mrs
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
